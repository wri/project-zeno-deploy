name: 'Deploy Terraform and Helm'
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # keeping this to allow manual runs
jobs:
  Deploy:
    name: 'Deploy Terraform and Helm'
    runs-on: ubuntu-latest
    environment:  ${{ (github.event_name == 'pull_request' && github.base_ref || github.ref_name) == 'main' && 'production' || 'staging' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # Sets the ENVIRONMENT variable to "production" if push or PR is to main, else, "staging" (if push is to 'develop')
      ENVIRONMENT: ${{ (github.event_name == 'pull_request' && github.base_ref || github.ref_name) == 'main' && 'production' || 'staging' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure Kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
           terraform_version: 1.5.1
      - name: Terraform Format
        id: fmt
        working-directory: ./terraform
        run: terraform fmt -no-color
      - name: Terraform Init
        id: init
        working-directory: ./terraform
        run: |
          STATE_PATH=${{ env.ENVIRONMENT == 'production' && 'prod' || env.ENVIRONMENT }}
          terraform init \
            -backend-config="key=terraform/state/${STATE_PATH}/terraform.tfstate"
      - name: Terraform Validate
        id: validate
        working-directory: ./terraform
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        if: github.event_name == 'pull_request'
        run: terraform plan -var-file="${{ env.ENVIRONMENT }}.tfvars" -no-color -input=false
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
         github-token: ${{ secrets.GITHUB_TOKEN }}
         script: |
           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

           <details><summary>Show Plan</summary>

           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`

           </details>

           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "Terraform plan failed. See above for error details."
          exit 1
      - name: Terraform Apply
        working-directory: ./terraform
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: terraform apply -var-file="${{ env.ENVIRONMENT }}.tfvars" -auto-approve
      - name: Configure kubeconfig
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: aws eks update-kubeconfig --region us-east-1 --name zeno-${{ env.ENVIRONMENT }}-cluster
      - name: Update Helm Dependencies
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        working-directory: ./helm/zeno
        run: helm dependency update

      # Deploy Zeno with all dependencies
      - name: Helm Deploy Zeno
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        working-directory: ./helm
        run: >
          helm upgrade --install zeno ./zeno
          -f zeno/values.yaml
          -f zeno/values-${{ env.ENVIRONMENT }}.yaml
          --set secrets.langfuse.INIT_USER_PASSWORD="${{ secrets.LANGFUSE_INIT_USER_PASSWORD }}"
          --set secrets.langfuse.INIT_PROJECT_SECRET_KEY="${{ secrets.LANGFUSE_INIT_PROJECT_SECRET_KEY }}"
          --set secrets.langfuse.INIT_PROJECT_PUBLIC_KEY="${{ secrets.LANGFUSE_INIT_PROJECT_PUBLIC_KEY }}"
          --set langfuse-chart.postgresql.auth.password="${{ secrets.DATABASE_PASSWORD }}"
          --set langfuse-chart.langfuse.nextauth.secret="${{ secrets.LANGFUSE_NEXTAUTH_SECRET }}"
          --set langfuse-chart.langfuse.salt="${{ secrets.LANGFUSE_SALT }}"
          --set secrets.api.OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          --set secrets.api.ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}"
          --set secrets.api.AWS_ACCESS_KEY_ID="${{ secrets.S3_READONLY_AWS_ACCESS_KEY_ID }}"
          --set secrets.api.AWS_SECRET_ACCESS_KEY="${{ secrets.S3_READONLY_AWS_SECRET_ACCESS_KEY }}"
          --set secrets.api.GEE_SERVICE_ACCOUNT_JSON="${{ secrets.GEE_SERVICE_ACCOUNT_JSON }}"
          --set secrets.api.MAPBOX_API_TOKEN="${{ secrets.MAPBOX_API_TOKEN }}"
          --set secrets.api.GFW_DATA_API_KEY="${{ secrets.GFW_DATA_API_KEY }}"
          --set secrets.api.GFW_DATA_API_USER_ID="${{ secrets.GFW_DATA_API_USER_ID }}"
          --set secrets.api.ELEVENLABS_API_KEY="${{ secrets.ELEVENLABS_API_KEY }}"
          --set db.POSTGRES_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"

