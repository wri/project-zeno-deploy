name: 'Deploy Terraform and Helm'
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # keeping this to allow manual runs
jobs:
  Deploy:
    name: 'Deploy Terraform and Helm'
    runs-on: ubuntu-latest
    environment:  ${{ (github.event_name == 'pull_request' && github.base_ref || github.ref_name) == 'main' && 'production' || 'staging' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # Sets the ENVIRONMENT variable to "production" if push or PR is to main, else, "staging" (if push is to 'develop')
      ENVIRONMENT: ${{ (github.event_name == 'pull_request' && github.base_ref || github.ref_name) == 'main' && 'production' || 'staging' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure Kubectl
        uses: azure/setup-kubectl@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
           terraform_version: 1.5.1
      - name: Terraform Format
        id: fmt
        working-directory: ./terraform
        run: terraform fmt -no-color
      - name: Terraform Init
        id: init
        working-directory: ./terraform
        run: |
          STATE_PATH=${{ env.ENVIRONMENT == 'production' && 'prod' || env.ENVIRONMENT }}
          terraform init \
            -backend-config="key=terraform/state/${STATE_PATH}/terraform.tfstate"
      - name: Terraform Validate
        id: validate
        working-directory: ./terraform
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        if: github.event_name == 'pull_request'
        run: terraform plan -var-file="${{ env.ENVIRONMENT }}.tfvars" -var="eoapi_db_password=${{ secrets.EOAPI_DB_PASSWORD }}" -no-color -input=false
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
         github-token: ${{ secrets.GITHUB_TOKEN }}
         script: |
           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
           #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

           <details><summary>Show Plan</summary>

           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`

           </details>

           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "Terraform plan failed. See above for error details."
          exit 1
      - name: Terraform Apply
        working-directory: ./terraform
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: terraform apply -var-file="${{ env.ENVIRONMENT }}.tfvars" -var="eoapi_db_password=${{ secrets.EOAPI_DB_PASSWORD }}" -auto-approve
      - name: Configure kubeconfig
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: aws eks update-kubeconfig --region us-east-1 --name zeno-${{ env.ENVIRONMENT }}-cluster
      # Add Helm repositories
      - name: Add Helm repositories
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add jetstack https://charts.jetstack.io
          helm repo add eoapi https://devseed.com/eoapi-k8s/
          helm repo add autoscaler https://kubernetes.github.io/autoscaler
          helm repo update

      # Deploy ingress-nginx
      - name: Deploy ingress-nginx
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: >
          helm upgrade --install 
          ingress-nginx
          ingress-nginx/ingress-nginx
          --version 4.11.3
          --namespace ingress-nginx
          --create-namespace
          --set controller.config.proxy-body-size=500m

      # Deploy cert-manager
      - name: Deploy cert-manager
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: >
          helm upgrade --install 
          cert-manager
          jetstack/cert-manager
          --version v1.16.1
          --namespace cert-manager
          --create-namespace
          --set installCRDs=true

      # Deploy cluster-autoscaler
      - name: Deploy cluster-autoscaler
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          ROLE_ARN=$(cd terraform && terraform output -raw cluster_autoscaler_iam_role_arn)
          helm upgrade --install cluster-autoscaler autoscaler/cluster-autoscaler \
            --version 9.43.0 \
            -f helm/cluster-autoscaler/values.yaml \
            -f helm/cluster-autoscaler/values-${{ env.ENVIRONMENT }}.yaml \
            --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"="${ROLE_ARN}" \
            --namespace kube-system

      # Update dependencies for monitoring
      - name: Update Helm Dependencies for monitoring
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          helm dependency update ./helm/support

      # Deploy monitoring services
      - name: Deploy monitoring services
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        working-directory: ./helm
        run: >
          helm upgrade --install support ./support
          -f support/values.yaml
          -f support/values-${{ env.ENVIRONMENT }}.yaml
          --namespace support
          --create-namespace

      # Update Zeno dependencies
      - name: Update Helm Dependencies for Zeno
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          helm dependency update ./helm/zeno

      # Deploy Zeno
      - name: Deploy Zeno
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        working-directory: ./helm
        run: >
          helm upgrade --install zeno ./zeno
          -f zeno/values.yaml
          -f zeno/values-${{ env.ENVIRONMENT }}.yaml
          --set langfuse.postgresql.auth.password="${{ secrets.DATABASE_PASSWORD }}"
          --set langfuse.langfuse.nextauth.secret.value="${{ secrets.LANGFUSE_NEXTAUTH_SECRET }}"
          --set langfuse.langfuse.salt.value="${{ secrets.LANGFUSE_SALT }}"
          --set langfuse.s3.accessKeyId.value="${{ secrets.LANGFUSE_S3_ACCESS_KEY }}"
          --set langfuse.s3.secretAccessKey.value="${{ secrets.LANGFUSE_S3_SECRET_KEY }}"
          --set zeno.secrets.langfuse.INIT_USER_PASSWORD="${{ secrets.LANGFUSE_INIT_USER_PASSWORD }}"
          --set zeno.secrets.langfuse.INIT_PROJECT_SECRET_KEY="${{ secrets.LANGFUSE_INIT_PROJECT_SECRET_KEY }}"
          --set zeno.secrets.langfuse.INIT_PROJECT_PUBLIC_KEY="${{ secrets.LANGFUSE_INIT_PROJECT_PUBLIC_KEY }}"
          --set zeno.secrets.langfuse.CLICKHOUSE_PASSWORD="${{ secrets.LANGFUSE_CLICKHOUSE_PASSWORD }}"
          --set zeno.secrets.langfuse.REDIS_PASSWORD="${{ secrets.LANGFUSE_REDIS_PASSWORD }}"
          --set zeno.secrets.api.OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          --set zeno.secrets.api.ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}"
          --set zeno.secrets.api.AWS_ACCESS_KEY_ID="${{ secrets.S3_READONLY_AWS_ACCESS_KEY_ID }}"
          --set zeno.secrets.api.AWS_SECRET_ACCESS_KEY="${{ secrets.S3_READONLY_AWS_SECRET_ACCESS_KEY }}"
          --set zeno.secrets.api.GEE_SERVICE_ACCOUNT_JSON="${{ secrets.GEE_SERVICE_ACCOUNT_JSON }}"
          --set zeno.secrets.api.MAPBOX_API_TOKEN="${{ secrets.MAPBOX_API_TOKEN }}"
          --set zeno.secrets.api.GFW_DATA_API_KEY="${{ secrets.GFW_DATA_API_KEY }}"
          --set zeno.secrets.api.GFW_DATA_API_USER_ID="${{ secrets.GFW_DATA_API_USER_ID }}"
          --set zeno.secrets.api.ELEVENLABS_API_KEY="${{ secrets.ELEVENLABS_API_KEY }}"
          --set zeno.secrets.api.COOKIE_SIGNER_SECRET_KEY="${{ secrets.COOKIE_SIGNER_SECRET_KEY }}"
          --set zeno.db.POSTGRES_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"
      # Deploy eoapi
      - name: Deploy eoapi
        if: |
          github.event_name == 'push' && 
          (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        working-directory: ./helm
        run: >
          helm upgrade --install 
          eoapi
          eoapi/eoapi
          --version 0.7.0
          -f eoapi/values.yaml
          -f eoapi/values-${{ env.ENVIRONMENT }}.yaml
          --namespace eoapi
          --create-namespace
